/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, WebsiteUser as PrismaWebsiteUser } from "@prisma/client";

export class WebsiteUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WebsiteUserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.websiteUser.count(args);
  }

  async websiteUsers(
    args: Prisma.WebsiteUserFindManyArgs
  ): Promise<PrismaWebsiteUser[]> {
    return this.prisma.websiteUser.findMany(args);
  }
  async websiteUser(
    args: Prisma.WebsiteUserFindUniqueArgs
  ): Promise<PrismaWebsiteUser | null> {
    return this.prisma.websiteUser.findUnique(args);
  }
  async createWebsiteUser(
    args: Prisma.WebsiteUserCreateArgs
  ): Promise<PrismaWebsiteUser> {
    return this.prisma.websiteUser.create(args);
  }
  async updateWebsiteUser(
    args: Prisma.WebsiteUserUpdateArgs
  ): Promise<PrismaWebsiteUser> {
    return this.prisma.websiteUser.update(args);
  }
  async deleteWebsiteUser(
    args: Prisma.WebsiteUserDeleteArgs
  ): Promise<PrismaWebsiteUser> {
    return this.prisma.websiteUser.delete(args);
  }
}
