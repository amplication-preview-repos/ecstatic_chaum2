/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WebsiteUser } from "./WebsiteUser";
import { WebsiteUserCountArgs } from "./WebsiteUserCountArgs";
import { WebsiteUserFindManyArgs } from "./WebsiteUserFindManyArgs";
import { WebsiteUserFindUniqueArgs } from "./WebsiteUserFindUniqueArgs";
import { CreateWebsiteUserArgs } from "./CreateWebsiteUserArgs";
import { UpdateWebsiteUserArgs } from "./UpdateWebsiteUserArgs";
import { DeleteWebsiteUserArgs } from "./DeleteWebsiteUserArgs";
import { WebsiteUserService } from "../websiteUser.service";
@graphql.Resolver(() => WebsiteUser)
export class WebsiteUserResolverBase {
  constructor(protected readonly service: WebsiteUserService) {}

  async _websiteUsersMeta(
    @graphql.Args() args: WebsiteUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WebsiteUser])
  async websiteUsers(
    @graphql.Args() args: WebsiteUserFindManyArgs
  ): Promise<WebsiteUser[]> {
    return this.service.websiteUsers(args);
  }

  @graphql.Query(() => WebsiteUser, { nullable: true })
  async websiteUser(
    @graphql.Args() args: WebsiteUserFindUniqueArgs
  ): Promise<WebsiteUser | null> {
    const result = await this.service.websiteUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WebsiteUser)
  async createWebsiteUser(
    @graphql.Args() args: CreateWebsiteUserArgs
  ): Promise<WebsiteUser> {
    return await this.service.createWebsiteUser({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => WebsiteUser)
  async updateWebsiteUser(
    @graphql.Args() args: UpdateWebsiteUserArgs
  ): Promise<WebsiteUser | null> {
    try {
      return await this.service.updateWebsiteUser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WebsiteUser)
  async deleteWebsiteUser(
    @graphql.Args() args: DeleteWebsiteUserArgs
  ): Promise<WebsiteUser | null> {
    try {
      return await this.service.deleteWebsiteUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
