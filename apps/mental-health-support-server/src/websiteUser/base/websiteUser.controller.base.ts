/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WebsiteUserService } from "../websiteUser.service";
import { WebsiteUserCreateInput } from "./WebsiteUserCreateInput";
import { WebsiteUser } from "./WebsiteUser";
import { WebsiteUserFindManyArgs } from "./WebsiteUserFindManyArgs";
import { WebsiteUserWhereUniqueInput } from "./WebsiteUserWhereUniqueInput";
import { WebsiteUserUpdateInput } from "./WebsiteUserUpdateInput";

export class WebsiteUserControllerBase {
  constructor(protected readonly service: WebsiteUserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WebsiteUser })
  async createWebsiteUser(
    @common.Body() data: WebsiteUserCreateInput
  ): Promise<WebsiteUser> {
    return await this.service.createWebsiteUser({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        isCrisis: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WebsiteUser] })
  @ApiNestedQuery(WebsiteUserFindManyArgs)
  async websiteUsers(@common.Req() request: Request): Promise<WebsiteUser[]> {
    const args = plainToClass(WebsiteUserFindManyArgs, request.query);
    return this.service.websiteUsers({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        isCrisis: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WebsiteUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async websiteUser(
    @common.Param() params: WebsiteUserWhereUniqueInput
  ): Promise<WebsiteUser | null> {
    const result = await this.service.websiteUser({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        isCrisis: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WebsiteUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWebsiteUser(
    @common.Param() params: WebsiteUserWhereUniqueInput,
    @common.Body() data: WebsiteUserUpdateInput
  ): Promise<WebsiteUser | null> {
    try {
      return await this.service.updateWebsiteUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          isCrisis: true,
          password: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WebsiteUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWebsiteUser(
    @common.Param() params: WebsiteUserWhereUniqueInput
  ): Promise<WebsiteUser | null> {
    try {
      return await this.service.deleteWebsiteUser({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          isCrisis: true,
          password: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
