/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ActivityRecommendationsService } from "../activityRecommendations.service";
import { ActivityRecommendationsCreateInput } from "./ActivityRecommendationsCreateInput";
import { ActivityRecommendations } from "./ActivityRecommendations";
import { ActivityRecommendationsFindManyArgs } from "./ActivityRecommendationsFindManyArgs";
import { ActivityRecommendationsWhereUniqueInput } from "./ActivityRecommendationsWhereUniqueInput";
import { ActivityRecommendationsUpdateInput } from "./ActivityRecommendationsUpdateInput";

export class ActivityRecommendationsControllerBase {
  constructor(protected readonly service: ActivityRecommendationsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ActivityRecommendations })
  async createActivityRecommendations(
    @common.Body() data: ActivityRecommendationsCreateInput
  ): Promise<ActivityRecommendations> {
    return await this.service.createActivityRecommendations({
      data: data,
      select: {
        activityType: true,
        createdAt: true,
        description: true,
        id: true,
        link: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ActivityRecommendations] })
  @ApiNestedQuery(ActivityRecommendationsFindManyArgs)
  async activityRecommendationsItems(
    @common.Req() request: Request
  ): Promise<ActivityRecommendations[]> {
    const args = plainToClass(
      ActivityRecommendationsFindManyArgs,
      request.query
    );
    return this.service.activityRecommendationsItems({
      ...args,
      select: {
        activityType: true,
        createdAt: true,
        description: true,
        id: true,
        link: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ActivityRecommendations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async activityRecommendations(
    @common.Param() params: ActivityRecommendationsWhereUniqueInput
  ): Promise<ActivityRecommendations | null> {
    const result = await this.service.activityRecommendations({
      where: params,
      select: {
        activityType: true,
        createdAt: true,
        description: true,
        id: true,
        link: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ActivityRecommendations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateActivityRecommendations(
    @common.Param() params: ActivityRecommendationsWhereUniqueInput,
    @common.Body() data: ActivityRecommendationsUpdateInput
  ): Promise<ActivityRecommendations | null> {
    try {
      return await this.service.updateActivityRecommendations({
        where: params,
        data: data,
        select: {
          activityType: true,
          createdAt: true,
          description: true,
          id: true,
          link: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ActivityRecommendations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteActivityRecommendations(
    @common.Param() params: ActivityRecommendationsWhereUniqueInput
  ): Promise<ActivityRecommendations | null> {
    try {
      return await this.service.deleteActivityRecommendations({
        where: params,
        select: {
          activityType: true,
          createdAt: true,
          description: true,
          id: true,
          link: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
