/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AuthentificationService } from "../authentification.service";
import { AuthentificationCreateInput } from "./AuthentificationCreateInput";
import { Authentification } from "./Authentification";
import { AuthentificationFindManyArgs } from "./AuthentificationFindManyArgs";
import { AuthentificationWhereUniqueInput } from "./AuthentificationWhereUniqueInput";
import { AuthentificationUpdateInput } from "./AuthentificationUpdateInput";

export class AuthentificationControllerBase {
  constructor(protected readonly service: AuthentificationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Authentification })
  async createAuthentification(
    @common.Body() data: AuthentificationCreateInput
  ): Promise<Authentification> {
    return await this.service.createAuthentification({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Authentification] })
  @ApiNestedQuery(AuthentificationFindManyArgs)
  async authentifications(
    @common.Req() request: Request
  ): Promise<Authentification[]> {
    const args = plainToClass(AuthentificationFindManyArgs, request.query);
    return this.service.authentifications({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Authentification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async authentification(
    @common.Param() params: AuthentificationWhereUniqueInput
  ): Promise<Authentification | null> {
    const result = await this.service.authentification({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Authentification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAuthentification(
    @common.Param() params: AuthentificationWhereUniqueInput,
    @common.Body() data: AuthentificationUpdateInput
  ): Promise<Authentification | null> {
    try {
      return await this.service.updateAuthentification({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          password: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Authentification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAuthentification(
    @common.Param() params: AuthentificationWhereUniqueInput
  ): Promise<Authentification | null> {
    try {
      return await this.service.deleteAuthentification({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          password: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
