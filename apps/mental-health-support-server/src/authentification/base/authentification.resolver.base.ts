/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Authentification } from "./Authentification";
import { AuthentificationCountArgs } from "./AuthentificationCountArgs";
import { AuthentificationFindManyArgs } from "./AuthentificationFindManyArgs";
import { AuthentificationFindUniqueArgs } from "./AuthentificationFindUniqueArgs";
import { CreateAuthentificationArgs } from "./CreateAuthentificationArgs";
import { UpdateAuthentificationArgs } from "./UpdateAuthentificationArgs";
import { DeleteAuthentificationArgs } from "./DeleteAuthentificationArgs";
import { AuthentificationService } from "../authentification.service";
@graphql.Resolver(() => Authentification)
export class AuthentificationResolverBase {
  constructor(protected readonly service: AuthentificationService) {}

  async _authentificationsMeta(
    @graphql.Args() args: AuthentificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Authentification])
  async authentifications(
    @graphql.Args() args: AuthentificationFindManyArgs
  ): Promise<Authentification[]> {
    return this.service.authentifications(args);
  }

  @graphql.Query(() => Authentification, { nullable: true })
  async authentification(
    @graphql.Args() args: AuthentificationFindUniqueArgs
  ): Promise<Authentification | null> {
    const result = await this.service.authentification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Authentification)
  async createAuthentification(
    @graphql.Args() args: CreateAuthentificationArgs
  ): Promise<Authentification> {
    return await this.service.createAuthentification({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Authentification)
  async updateAuthentification(
    @graphql.Args() args: UpdateAuthentificationArgs
  ): Promise<Authentification | null> {
    try {
      return await this.service.updateAuthentification({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Authentification)
  async deleteAuthentification(
    @graphql.Args() args: DeleteAuthentificationArgs
  ): Promise<Authentification | null> {
    try {
      return await this.service.deleteAuthentification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
