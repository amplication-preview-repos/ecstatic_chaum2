/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Authentification as PrismaAuthentification,
} from "@prisma/client";

export class AuthentificationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AuthentificationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.authentification.count(args);
  }

  async authentifications(
    args: Prisma.AuthentificationFindManyArgs
  ): Promise<PrismaAuthentification[]> {
    return this.prisma.authentification.findMany(args);
  }
  async authentification(
    args: Prisma.AuthentificationFindUniqueArgs
  ): Promise<PrismaAuthentification | null> {
    return this.prisma.authentification.findUnique(args);
  }
  async createAuthentification(
    args: Prisma.AuthentificationCreateArgs
  ): Promise<PrismaAuthentification> {
    return this.prisma.authentification.create(args);
  }
  async updateAuthentification(
    args: Prisma.AuthentificationUpdateArgs
  ): Promise<PrismaAuthentification> {
    return this.prisma.authentification.update(args);
  }
  async deleteAuthentification(
    args: Prisma.AuthentificationDeleteArgs
  ): Promise<PrismaAuthentification> {
    return this.prisma.authentification.delete(args);
  }
}
